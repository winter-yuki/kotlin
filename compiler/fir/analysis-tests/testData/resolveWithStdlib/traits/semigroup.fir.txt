FILE: semigroup.kt
    @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|)) @R|kotlin/annotation/Retention|(value = Q|kotlin/annotation/AnnotationRetention|.R|kotlin/annotation/AnnotationRetention.BINARY|) public final annotation class Trait : R|kotlin/Annotation| {
        public constructor(): R|Trait| {
            super<R|kotlin/Any|>()
        }

    }
    public abstract interface Semigroup<T> : R|kotlin/Any| {
        public abstract infix fun R|T|.sadd(other: R|T|): R|T|

    }
    public abstract interface Monoid<T> : R|Semigroup<T>| {
        public abstract val empty: R|T|
            public get(): R|T|

    }
    context(R|Monoid<T>|)
    public final fun <T> concat(vararg xs: R|kotlin/Array<out T>|): R|T| {
        ^concat R|<local>/xs|.R|kotlin/collections/fold|<R|T|, R|T|>(this@R|/concat|.R|SubstitutionOverride</Monoid.empty: R|T|>|, <L> = fold@fun <anonymous>(acc: R|T|, t: R|T|): R|T| <inline=Inline, kind=UNKNOWN>  {
            ^ (this@R|/concat|, R|<local>/acc|).R|SubstitutionOverride</Monoid.sadd: R|T|>|(R|<local>/t|)
        }
        )
    }
    public final object IntAddMonoid : R|Monoid<kotlin/Int>| {
        private constructor(): R|IntAddMonoid| {
            super<R|kotlin/Any|>()
        }

        public open override val empty: R|kotlin/Int| = Int(0)
            public get(): R|kotlin/Int|

        public open override infix fun R|kotlin/Int|.sadd(other: R|kotlin/Int|): R|kotlin/Int| {
            ^sadd this@R|/IntAddMonoid.sadd|.R|kotlin/Int.plus|(R|<local>/other|)
        }

    }
    public final object StringMonoid : R|Monoid<kotlin/String>| {
        private constructor(): R|StringMonoid| {
            super<R|kotlin/Any|>()
        }

        public open override val empty: R|kotlin/String| = String()
            public get(): R|kotlin/String|

        public open override infix fun R|kotlin/String|.sadd(other: R|kotlin/String|): R|kotlin/String| {
            ^sadd this@R|/StringMonoid.sadd|.R|kotlin/String.plus|(R|<local>/other|)
        }

    }
    public final object TraitBunch : R|kotlin/Any| {
        private constructor(): R|TraitBunch| {
            super<R|kotlin/Any|>()
        }

        field:@R|Trait|() public final val intMonoid: R|Monoid<kotlin/Int>| = Q|IntAddMonoid|
            public get(): R|Monoid<kotlin/Int>|

        field:@R|Trait|() public final val stringMonoid: R|Monoid<kotlin/String>| = Q|StringMonoid|
            public get(): R|Monoid<kotlin/String>|

    }
    context(R|TraitBunch|)
    public final fun test(): R|kotlin/Unit| {
        (this@R|/test|, Int(1)).R|SubstitutionOverride</Monoid.sadd: R|kotlin/Int|>|(Int(2))
        (this@R|/test|, String(a)).R|SubstitutionOverride</Monoid.sadd: R|kotlin/String|>|(String(b))
        R|/concat|<R|kotlin/Int|>(vararg(Int(1), Int(2), Int(3)))
        R|/concat|<R|kotlin/String|>(vararg(String(a), String(b), String(C)))
    }
